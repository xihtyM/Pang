// BUILTIN TYPES
macro sizeof_char       1 end
macro sizeof_short      2 end
macro sizeof_cint       4 end
macro sizeof_long       4 end
macro sizeof_float      4 end
macro sizeof_long_long  8 end
macro sizeof_double     8 end
macro sizeof_ptr        8 end
macro sizeof_int        8 end


// STDINT
macro sizeof_int8_t     1 end
macro sizeof_int16_t    2 end
macro sizeof_int32_t    4 end
macro sizeof_int64_t    8 end
macro sizeof_uint8_t    1 end
macro sizeof_uint16_t   2 end
macro sizeof_uint32_t   4 end
macro sizeof_uint64_t   8 end
macro sizeof_size_t     8 end
macro sizeof_intmax_t   8 end

include 'coreprt.pang'

// used to generate a unique number
macro iota __ENUM__ end

macro NULL 0 end

/// @brief Reads line from a file.
/// @param file pointer to FILE struct to read from.
/// @param number of characters to read.
/// @return string read from file, must be freed.
/// Stack must be preserved to [FILE*, int, char*] at end.
//macro fgets
//    // stack: [FILE*, int, char*]
//    call malloc
//    "%p %d %p" call printf drop drop
//    call fgets
//end


//macro gets
//    // setup stack: [..., stdin, n]
//    stdin swap fgets
//end

/// @brief Writes string to a file.
/// @param string pointer to char array to be written.
/// @param file pointer to FILE struct containing file.
/// Stack must be preserved to [FILE*, char*] at end.
macro write
    // START: [char*, FILE*]

    // stack: [FILE*, char*, strlen(char*)]
    swap call strlen


    // stack: [FILE*, strlen(char*), sizeof(char), char*]
    swap sizeof_char swap


    // TODO: return nonzero on failure to write strlen(char*) characters.
    // ignore amount of items written and presume it worked for now
    // stack: [FILE*, strlen(char*), sizeof(char), char*, int]
    call fwrite

    // stack: [FILE*, strlen(char*), char*, sizeof(char)]
    drop swap

    // stack: [char*, FILE*]
    drop swap drop swap
end

